// Basic schema setup
const schema = new prosemirror_schema_basic.Schema({
    nodes: {
        ...prosemirror_schema_basic.nodes,
        ...prosemirror_schema_list.listNodes,
        table: {
            content: "tr+",
            tableRole: "table",
            isolating: true,
            group: "block",
            parseDOM: [{ tag: "table" }],
            toDOM() { return ["table", ["tbody", 0]] }
        },
        tr: {
            content: "(td | th)*",
            tableRole: "row",
            parseDOM: [{ tag: "tr" }],
            toDOM() { return ["tr", 0] }
        },
        td: {
            content: "block+",
            tableRole: "cell",
            parseDOM: [{ tag: "td" }],
            toDOM() { return ["td", 0] }
        },
        th: {
            content: "block+",
            tableRole: "header_cell",
            parseDOM: [{ tag: "th" }],
            toDOM() { return ["th", 0] }
        }
    },
    marks: prosemirror_schema_basic.marks
});

// Helper function to create nodes
function createNode(type, attrs = null, content = null) {
    return schema.node(type, attrs, content);
}

// Initialize the basic plugins
function createEditorPlugins() {
    return [
        prosemirror_state.keymap(prosemirror_tables.tableEditing),
        prosemirror_state.keymap(prosemirror_commands.baseKeymap),
        prosemirror_tables.tableNodes({
            tableGroup: "block",
            cellContent: "block+",
            cellAttributes: {
                background: {
                    default: null,
                    getFromDOM: dom => dom.style.backgroundColor || null,
                    setDOMAttr: (value, attrs) => {
                        if (value) attrs.style = (attrs.style || '') + `background-color: ${value};`
                    }
                }
            }
        })
    ];
}

// Create the initial document state
function createEditorState(content = "") {
    const doc = prosemirror_model.DOMParser.fromSchema(schema).parse(
        content ? content : document.createElement("div")
    );

    return prosemirror_state.EditorState.create({
        doc,
        schema,
        plugins: createEditorPlugins()
    });
}

// Export necessary objects and functions
window.ProseMirrorSetup = {
    schema,
    createEditorState,
    createNode
};